/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.voice.iot.controller;

import com.voice.iot.model.DeviceDto;
import com.voice.iot.model.DevicesDto;
import com.voice.iot.model.ProblemDto;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@Validated
@Api(value = "ManageIoTTrackingDevices", description = "the ManageIoTTrackingDevices API")
public interface ManageIoTTrackingDevicesApi {

    default ManageIoTTrackingDevicesApiDelegate getDelegate() {
        return new ManageIoTTrackingDevicesApiDelegate() {};
    }

    @ApiOperation(value = "Delete a device configuration status By Id", nickname = "deleteDeviceConfigurationStatusById", notes = "Delete a device configuration status By Id", authorizations = {
        @Authorization(value = "BearerAuth")
    }, tags={ "Manage IoT tracking devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDto.class) })
    @RequestMapping(value = "/v1/devices/{deviceId}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteDeviceConfigurationStatusById(@ApiParam(value = "device id",required=true) @PathVariable("deviceId") UUID deviceId) {
        return getDelegate().deleteDeviceConfigurationStatusById(deviceId);
    }


    @ApiOperation(value = "Returns all devices in the warehouse that are waiting for activation", nickname = "getAllDevices", notes = "Get All devices that waiting for activation", response = DevicesDto.class, authorizations = {
        @Authorization(value = "BearerAuth")
    }, tags={ "Manage IoT tracking devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = DevicesDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDto.class) })
    @RequestMapping(value = "/v1/devices/status/{status}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DevicesDto> getAllDevices(@ApiParam(value = "device status",required=true) @PathVariable("status") UUID status,@Min(1)@ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getAllDevices(status, pageNumber, pageSize);
    }


    @ApiOperation(value = "Returns an ordered result of devices available for sale", nickname = "getDevicesAvailableForSale", notes = "Get devices available for sale", response = DevicesDto.class, authorizations = {
        @Authorization(value = "BearerAuth")
    }, tags={ "Manage IoT tracking devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "success", response = DevicesDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDto.class) })
    @RequestMapping(value = "/v1/devices",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<DevicesDto> getDevicesAvailableForSale(@Min(1)@ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getDevicesAvailableForSale(pageNumber, pageSize);
    }


    @ApiOperation(value = "update a device configuration status By Id", nickname = "updateDeviceConfigurationStatusById", notes = "update a device configuration status By Id", authorizations = {
        @Authorization(value = "BearerAuth")
    }, tags={ "Manage IoT tracking devices", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content"),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 404, message = "Not Found", response = ProblemDto.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ProblemDto.class) })
    @RequestMapping(value = "/v1/devices/{deviceId}",
        produces = { "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateDeviceConfigurationStatusById(@ApiParam(value = "device id",required=true) @PathVariable("deviceId") UUID deviceId,@ApiParam(value = "device object that needs to be updated." ,required=true )  @Valid @RequestBody DeviceDto deviceDto) {
        return getDelegate().updateDeviceConfigurationStatusById(deviceId, deviceDto);
    }

}
